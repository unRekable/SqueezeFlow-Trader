#!/usr/bin/env python3
"""
Diagnose specific exit issues raised by user
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

print("=" * 80)
print("DETAILED EXIT LOGIC DIAGNOSIS")
print("=" * 80)

# Issue 1: ETH SHORT should have exited when price went above $3605.29
print("\n1. ETH SHORT POSITION RANGE BREAK ISSUE")
print("-" * 60)
print("PROBLEM: ETH SHORT at $3587.35 should exit when price > $3605.29")
print("User confirms price DID go above $3605.29 but position didn't close")
print()
print("DIAGNOSIS:")
print("Looking at phase5_exits.py lines 234-241:")
print("  - range_high = $3587.35 + ($3587.35 * 0.005) = $3605.29 ✓")
print("  - Exit condition: current_price > range_high OR recent_high > range_high * 1.005")
print("  - So needs: price > $3605.29 OR recent_high > $3610.59")
print()
print("POSSIBLE BUG:")
print("The position side might not be 'SELL' as expected.")
print("- Check if position.get('side') returns 'SELL' or 'SHORT'")
print("- The backtest might store it as 'SHORT' but exit logic expects 'SELL'")
print("- Line 234: elif position_side == 'SELL': might never match!")

# Issue 2: Entry Analysis Preservation
print("\n\n2. ENTRY ANALYSIS NOT PRESERVED")
print("-" * 60)
print("PROBLEM: Exit logic needs the original entry analysis but gets overwritten")
print()
print("DIAGNOSIS:")
print("In strategy.py _handle_existing_positions() line ~238:")
print("  exit_result = self.phase5.manage_exits(")
print("      dataset, position, self.last_analysis or {}")
print("  )")
print()
print("THE ISSUE:")
print("- self.last_analysis gets overwritten EVERY analyze() call")
print("- Even when only running Phase 5, line 204: self.last_analysis = results")
print("- So exit checks get the CURRENT analysis, not ENTRY analysis")
print()
print("IMPACT:")
print("- CVD baselines are wrong (comparing to current, not entry)")
print("- Entry context is lost (original squeeze detection)")
print("- Exit logic can't properly evaluate if conditions changed")
print()
print("CORRECT BEHAVIOR (per strategy doc):")
print("- When position exists, should ONLY run Phase 5")
print("- Phase 5 needs the ORIGINAL entry analysis from when trade opened")
print("- This should be stored with the position, not in self.last_analysis")

# Issue 3: CVD Baseline Approximation
print("\n\n3. CVD BASELINE APPROXIMATION ISSUES")
print("-" * 60)
print("PROBLEM: Without baseline manager, exit logic uses wrong reference")
print()
print("DIAGNOSIS:")
print("In phase5_exits.py lines 279-290:")
print("  # Fallback to approximation (existing logic)")
print("  entry_index = position.get('entry_index', -20)")
print()
print("THE ISSUE:")
print("- Uses index -20 as fallback (20 candles ago)")
print("- But position doesn't have 'entry_index' field")
print("- So ALWAYS uses -20, which is arbitrary")
print()
print("WHAT IT SHOULD DO (per strategy doc):")
print("- Store actual CVD values at entry time")
print("- Compare current CVD to entry CVD")
print("- Track if CVD has reversed from entry baseline")
print()
print("CURRENT BEHAVIOR:")
print("- Compares to CVD from 20 minutes ago (arbitrary)")
print("- In rolling windows, this is meaningless")
print("- Can't detect true CVD reversal from entry")

# Issue 4: Structure Break Lookback
print("\n\n4. STRUCTURE BREAK LOOKBACK (20 CANDLES)")
print("-" * 60)
print("PROBLEM: Uses fixed 20-candle lookback for swing high/low")
print()
print("DIAGNOSIS:")
print("In phase5_exits.py lines 333-335:")
print("  recent_data = ohlcv.iloc[-20:]")
print("  swing_high = recent_data[high_col].max()")
print("  swing_low = recent_data[low_col].min()")
print()
print("THE ISSUE:")
print("- Fixed 20 candles = 20 minutes in 1m timeframe")
print("- Too short for meaningful structure")
print("- Should be dynamic based on market volatility")
print()
print("WHAT IT SHOULD DO (per strategy doc):")
print("- Identify SIGNIFICANT swing points")
print("- Use adaptive lookback based on volatility")
print("- Consider multi-timeframe structure")
print()
print("USER'S CONCERN:")
print("'I don't think we should use fixed values'")
print("- Correct! Market structure varies with volatility")
print("- 20 candles in calm market ≠ 20 candles in volatile market")

# Summary
print("\n\n" + "=" * 80)
print("ROOT CAUSES IDENTIFIED")
print("=" * 80)
print()
print("1. POSITION SIDE MISMATCH:")
print("   - Backtest stores 'SHORT' but exit logic checks for 'SELL'")
print("   - Range break condition never triggers even when price exceeds threshold")
print()
print("2. ENTRY ANALYSIS LOST:")
print("   - self.last_analysis overwritten every cycle")
print("   - Exit checks use current analysis, not entry analysis")
print("   - Can't properly evaluate if conditions deteriorated")
print()
print("3. NO CVD BASELINE:")
print("   - Position doesn't store entry CVD values")
print("   - Falls back to arbitrary -20 index")
print("   - Can't detect true CVD reversal from entry")
print()
print("4. FIXED STRUCTURE LOOKBACK:")
print("   - 20-candle fixed window ignores market conditions")
print("   - Should adapt to volatility and timeframe")

print("\n" + "=" * 80)
print("RECOMMENDED FIXES")
print("=" * 80)
print()
print("1. FIX POSITION SIDE CHECK:")
print("   phase5_exits.py line 234:")
print("   Change: elif position_side == 'SELL':")
print("   To: elif position_side in ['SELL', 'SHORT']:")
print()
print("2. STORE ENTRY ANALYSIS WITH POSITION:")
print("   - Add entry_analysis field when opening position")
print("   - Pass this to exit checks, not self.last_analysis")
print()
print("3. STORE CVD BASELINES AT ENTRY:")
print("   - Add spot_cvd_entry and futures_cvd_entry to position")
print("   - Compare current to these actual baselines")
print()
print("4. DYNAMIC STRUCTURE LOOKBACK:")
print("   - Calculate based on ATR or volatility")
print("   - Minimum 50 candles, maximum 200")
print("   - Adjust for timeframe (1m vs 5m vs 15m)")